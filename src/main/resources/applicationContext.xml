<?xml version="1.0" encoding="UTF-8"?>      
<beans xmlns="http://www.springframework.org/schema/beans"      
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"     
    xmlns:p="http://www.springframework.org/schema/p"    
    xmlns:aop="http://www.springframework.org/schema/aop"     
    xmlns:context="http://www.springframework.org/schema/context"    
    xmlns:jee="http://www.springframework.org/schema/jee"    
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="      
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd    
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd    
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd    
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd    
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        ">
   	
   	<!-- 配置 SqlSessionFactory, org.mybatis.spring.SqlSessionFactoryBean 是 Mybatis 社区开发用于整合 Spring 的 bean -->
   	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" 
   		  p:basePackage="com.Mapper" 
   		  p:sqlSessionFactoryBeanName="sqlSessionFactory" />
   		  
   	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" p:dataSource-ref="dataSource" p:configLocation="classpath:mybatis-config.xml" />
   	<!-- MyBatis -->		  
   	
   	<!-- 自动扫描 -->
    <context:component-scan base-package="com.cn.service" />
    <context:component-scan base-package="com.service" />
    <context:component-scan base-package="com.dao" />
    <context:component-scan base-package="com.validator" />
    
    <!-- 引入配置文件 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="locations">
            <list>  
                <value>classpath:db.properties</value>
            </list>  
        </property>  
    </bean>
    
    <!-- dataSource 配置 -->  
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">  
        <!-- 基本属性 url、user、password -->  
        <property name="url" value="${jdbc.url}"/>  
        <property name="username" value="${jdbc.username}"/>  
        <property name="password" value="${jdbc.password}"/>  
  		
        <!-- 配置初始化大小、最小、最大 -->  
        <property name="initialSize" value="${ds.initialSize}"/>  
        <property name="minIdle" value="${ds.minIdle}"/>  
        <property name="maxActive" value="${ds.maxActive}"/>  
  		
        <!-- 配置获取连接等待超时的时间 -->  
        <property name="maxWait" value="${ds.maxWait}"/>  
  		
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
        <property name="timeBetweenEvictionRunsMillis" value="${ds.timeBetweenEvictionRunsMillis}"/>  
  		
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
        <property name="minEvictableIdleTimeMillis" value="${ds.minEvictableIdleTimeMillis}"/>  
  		
        <property name="validationQuery" value="SELECT 'x'"/>  
        <property name="testWhileIdle" value="true"/>  
        <property name="testOnBorrow" value="false"/>  
        <property name="testOnReturn" value="false"/>  
  		
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->  
        <property name="poolPreparedStatements" value="false"/>  
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>  
  		
        <!-- 配置监控统计拦截的filters -->  
        <property name="filters" value="stat"/>
    </bean>
   	
   	<bean id="dataSourceProxy" class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
        <property name="targetDataSource" ref="dataSource"/>
    </bean>
	
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <constructor-arg ref="dataSourceProxy"/>
    </bean>
    
    <!-- 自定义Realm -->  
    <bean id="myRealm" class="com.cn.service.MyShiro"/>
    
    <!-- Shiro过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">    
        <!-- Shiro的核心安全接口,这个属性是必须的 -->    
        <property name="securityManager" ref="securityManager"/>  
        <!-- 身份认证失败，则跳转到登录页面的配置 -->    
        <property name="loginUrl" value="/login"/>  
        <!-- 权限认证失败，则跳转到指定页面 -->    
        <!-- <property name="unauthorizedUrl" value="/unauthorized"/> -->
        <!-- Shiro连接约束配置,即过滤链的定义 -->    
        <property name="filterChainDefinitions">
            <value>
             	/login=anon
             	/logout=logout
             	/Bootstrap/**=anon
             	/easyui/**=anon
             	/JS/**=anon
             	/bs-plugins/**=anon
             	/ueditor/**=anon
             	/** = authc
            </value>
        </property>
    </bean>
	
	<!-- 安全管理器 -->  
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">    
      <property name="realm" ref="myRealm"/>    
    </bean>
    
	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="springCacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager" ref="ehcacheManager"/>
    </bean>
	
	<!-- 配置 Bean 后置处理器: 会自动的调用和 Spring 整合后各个组件的生命周期方法. -->  
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
	
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">    
	    <property name="exceptionMappings">    
	        <props>
	            <prop key="org.apache.shiro.authz.UnauthorizedException">/unauthorized</prop>
	        </props>
	    </property>   
	</bean>
	
	<!-- 开启Shiro注解 -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">    
    	<property name="securityManager" ref="securityManager"/>    
    </bean>
	
    <bean id="ehcacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:ehcache/ehcache.xml"/>
    </bean>
	
</beans>